<launch>
  <arg name="pipeline" default="ompl" />

  <!-- By default, we do not start a database (it can be large) -->
  <arg name="db" default="false" />
  <!-- Allow user to specify database location -->
  <arg name="db_path" default="$(find kinova_moveit)/default_warehouse_mongo_db" />

  <!-- By default, we will load or override the robot_description -->
  <arg name="load_robot_description" default="false"/>

  <!-- Choose controller manager: fake, simple, or ros_control -->
  <arg name="moveit_controller_manager" default="fake" />
  <!-- Set execution mode for fake execution controllers -->
  <arg name="fake_execution_type" default="interpolate" />

  <!-- By default, hide joint_state_publisher's GUI in 'fake' controller_manager mode -->
  <arg name="use_gui" default="false" />
  <arg name="use_rviz" default="true" />

  <!-- If needed, broadcast static tf for robot root -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="virtual_joint_broadcaster_0" args="0 0 0 0 0 0 world j2n6s300_link_base" />


  <!-- these are the arguments you can pass this launch file, for example paused:=true -->  
  <arg name="kinova_robotType" default="j2n6s300"/>
  <arg name="kinova_robotName" default="$(arg kinova_robotType)"/>
  <arg name="paused" default="true"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="use_trajectory_controller" default="false"/>
  <arg name="is7dof" default="false"/>
  <arg name="rqt" default="false"/>
  <arg name="has2finger" default="false"/>
  <arg name="description_name" default="robot_description"/> <!-- allows remapping of robot_description into a namespace -->

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find kinova_gazebo)/worlds/arm_example.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description"
    command="$(find xacro)/xacro --inorder '$(find kinova_description)/urdf/$(arg kinova_robotType)_standalone.xacro'" />

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <!-- For the 6DOF -->
  <group unless="$(arg is7dof)">
    <!-- For 3 fingers -->
    <node unless="$(arg has2finger)" name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
      args="-urdf -model $(arg kinova_robotName) -param robot_description
          -J $(arg kinova_robotType)_joint_1 1.57075
          -J $(arg kinova_robotType)_joint_2 3.14159265359
          -J $(arg kinova_robotType)_joint_3 3.14159265359
          -J $(arg kinova_robotType)_joint_4 0.0
          -J $(arg kinova_robotType)_joint_5 0.0
          -J $(arg kinova_robotType)_joint_6 0.0
          -J $(arg kinova_robotType)_joint_finger_1 1.0
          -J $(arg kinova_robotType)_joint_finger_2 1.0
          -J $(arg kinova_robotType)_joint_finger_3 1.0" />
    <!-- For 2 fingers -->
    <node if="$(arg has2finger)" name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
      args="-urdf -model $(arg kinova_robotName) -param robot_description
          -J $(arg kinova_robotType)_joint_1 0.0
          -J $(arg kinova_robotType)_joint_2 2.9
          -J $(arg kinova_robotType)_joint_3 1.3
          -J $(arg kinova_robotType)_joint_4 -2.07
          -J $(arg kinova_robotType)_joint_5 1.4
          -J $(arg kinova_robotType)_joint_6 0.0
          -J $(arg kinova_robotType)_joint_finger_1 1.0
          -J $(arg kinova_robotType)_joint_finger_2 1.0" />
  </group>

  <!-- For the 7DOF -->
  <group if="$(arg is7dof)">
    <!-- For 3 fingers -->
    <node unless="$(arg has2finger)" name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -model $(arg kinova_robotName) -param robot_description
        -J $(arg kinova_robotType)_joint_1 0.0
        -J $(arg kinova_robotType)_joint_2 2.9
        -J $(arg kinova_robotType)_joint_3 0.0
        -J $(arg kinova_robotType)_joint_4 1.3
        -J $(arg kinova_robotType)_joint_5 -2.07
        -J $(arg kinova_robotType)_joint_6 1.4
        -J $(arg kinova_robotType)_joint_7 0.0
        -J $(arg kinova_robotType)_joint_finger_1 1.0
        -J $(arg kinova_robotType)_joint_finger_2 1.0
        -J $(arg kinova_robotType)_joint_finger_3 1.0" />
    <!-- For 2 fingers -->
    <node if="$(arg has2finger)" name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -model $(arg kinova_robotName) -param robot_description
        -J $(arg kinova_robotType)_joint_1 0.0
        -J $(arg kinova_robotType)_joint_2 2.9
        -J $(arg kinova_robotType)_joint_3 0.0
        -J $(arg kinova_robotType)_joint_4 1.3
        -J $(arg kinova_robotType)_joint_5 -2.07
        -J $(arg kinova_robotType)_joint_6 1.4
        -J $(arg kinova_robotType)_joint_7 0.0
        -J $(arg kinova_robotType)_joint_finger_1 1.0
        -J $(arg kinova_robotType)_joint_finger_2 1.0" />
  </group>

  <!-- ros_control launch file -->
  <include file="$(find kinova_control)/launch/kinova_control.launch">
    <arg name="kinova_robotName" value="$(arg kinova_robotName)"/>
    <arg name="kinova_robotType" value="$(arg kinova_robotType)"/>
    <arg name="use_trajectory_controller" value="false"/>
    <arg name="is7dof" value="false"/>
    <arg name="has2finger" value="false"/>
    <arg name="description_name" value="$(arg description_name)"/>
  </include>
  
  <include file="$(find kinova_moveit)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="false"/>
    <arg name="moveit_controller_manager" value="$(arg moveit_controller_manager)" />
    <arg name="fake_execution_type" value="$(arg fake_execution_type)"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="pipeline" value="$(arg pipeline)"/>
    <arg name="load_robot_description" value="$(arg load_robot_description)"/>
  </include>
   
</launch>

